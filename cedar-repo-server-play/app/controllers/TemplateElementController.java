package controllers;

import com.fasterxml.jackson.databind.JsonNode;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import org.metadatacenter.model.CedarNodeType;
import org.metadatacenter.rest.exception.CedarAssertionException;
import org.metadatacenter.server.security.Authorization;
import org.metadatacenter.server.security.CedarAuthFromRequestFactory;
import org.metadatacenter.server.security.exception.CedarAccessException;
import org.metadatacenter.server.security.model.AuthRequest;
import org.metadatacenter.server.security.model.auth.CedarPermission;
import org.metadatacenter.server.service.TemplateElementService;
import org.metadatacenter.util.json.JsonUtils;
import play.mvc.Result;

@Api(value = "/template-elements", description = "Template element operations")
public class TemplateElementController extends AbstractRepoServerController {

    private static TemplateElementService<String, JsonNode> templateElementService;

  public static void injectTemplateElementService(TemplateElementService<String, JsonNode> tes) {
    templateElementService = tes;
  }

  @ApiOperation(
      value = "Find template element by id",
      httpMethod = "GET")
  public static Result findTemplateElement(String id) throws CedarAssertionException {
    String templateElementId = cedarConfig.getLinkedDataPrefix(CedarNodeType.ELEMENT) + id;
    boolean canProceed = false;
    try {
      AuthRequest frontendRequest = CedarAuthFromRequestFactory.fromRequest(request());
      Authorization.getUserAndEnsurePermission(frontendRequest, CedarPermission.TEMPLATE_ELEMENT_READ);
      if (userHasReadAccessToResource(folderBase, templateElementId)) {
        canProceed = true;
      }
    } catch (CedarAccessException e) {
      play.Logger.error("Access Error while reading the template element", e);
      return forbiddenWithError(e);
    }
    if (canProceed) {
      try {
        JsonNode templateElement = templateElementService.findTemplateElement(templateElementId);
        if (templateElement != null) {
          // Remove autogenerated _id field to avoid exposing it
          templateElement = JsonUtils.removeField(templateElement, "_id");
          return ok(templateElement);
        }
        return notFound();
      } catch (IllegalArgumentException e) {
        return badRequestWithError(e);
      } catch (Exception e) {
        return internalServerErrorWithError(e);
      }
    } else {
      return forbidden("You do not have read access for this element");
    }
  }
}