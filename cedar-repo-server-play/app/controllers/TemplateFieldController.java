package controllers;

import com.fasterxml.jackson.databind.JsonNode;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import org.metadatacenter.model.CedarNodeType;
import org.metadatacenter.server.security.Authorization;
import org.metadatacenter.server.security.CedarAuthFromRequestFactory;
import org.metadatacenter.server.security.exception.CedarAccessException;
import org.metadatacenter.server.security.model.IAuthRequest;
import org.metadatacenter.server.security.model.auth.CedarPermission;
import org.metadatacenter.server.service.TemplateFieldService;
import org.metadatacenter.util.json.JsonUtils;
import play.mvc.Result;

@Api(value = "/template-fields", description = "Template field operations")
public class TemplateFieldController extends AbstractRepoServerController {

  private static TemplateFieldService<String, JsonNode> templateFieldService;

  public static void injectTemplateFieldService(TemplateFieldService<String, JsonNode> tfs) {
    templateFieldService = tfs;
  }

  @ApiOperation(
      value = "Find template field by id",
      httpMethod = "GET")
  public static Result findTemplateInstance(String id) {
    String templateFieldId = cedarConfig.getLinkedDataPrefix(CedarNodeType.FIELD) + id;
    boolean canProceed = false;
    try {
      IAuthRequest frontendRequest = CedarAuthFromRequestFactory.fromRequest(request());
      Authorization.getUserAndEnsurePermission(frontendRequest, CedarPermission.TEMPLATE_FIELD_READ);
      if (userHasReadAccessToResource(folderBase, templateFieldId)) {
        canProceed = true;
      }
    } catch (CedarAccessException e) {
      play.Logger.error("Access Error while reading the template field", e);
      return forbiddenWithError(e);
    }
    if (canProceed) {
      try {
        JsonNode templateInstance = templateFieldService.findTemplateField(templateFieldId);
        if (templateInstance != null) {
          // Remove autogenerated _id field to avoid exposing it
          templateInstance = JsonUtils.removeField(templateInstance, "_id");
          return ok(templateInstance);
        }
        return notFound();
      } catch (IllegalArgumentException e) {
        return badRequestWithError(e);
      } catch (Exception e) {
        return internalServerErrorWithError(e);
      }
    } else {
      return forbidden("You do not have read access for this field");
    }
  }
}